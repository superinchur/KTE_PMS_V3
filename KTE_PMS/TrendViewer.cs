using DevExpress.XtraCharts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace KTE_PMS
{
    public partial class TrendViewer : MIMIC.Viewer
    {
        public TrendViewer()
        {
            InitializeComponent();

            XYDiagram diagram = (XYDiagram)chartControl1.Diagram;
            XYDiagram diagram1 = (XYDiagram)chartControl2.Diagram;
            XYDiagram diagram2 = (XYDiagram)chartControl3.Diagram;
            XYDiagram diagram3 = (XYDiagram)chartControl4.Diagram;

            diagram.AxisX.Label.TextPattern = "{A: yy/MM/dd hh:mm}";
            diagram1.AxisX.Label.TextPattern = "{A: yy/MM/dd hh:mm}";
            diagram2.AxisX.Label.TextPattern = "{A: yy/MM/dd hh:mm}";
            diagram3.AxisX.Label.TextPattern = "{A: yy/MM/dd hh:mm}";

            diagram.AxisX.DateTimeScaleOptions.ScaleMode = ScaleMode.Continuous;
            diagram1.AxisX.DateTimeScaleOptions.ScaleMode = ScaleMode.Continuous;
            diagram2.AxisX.DateTimeScaleOptions.ScaleMode = ScaleMode.Continuous;
            diagram3.AxisX.DateTimeScaleOptions.ScaleMode = ScaleMode.Continuous;

            Battery_DataSource.Fill();

            timer1.Interval = 1000;      // 1초
            timer1.Enabled = true;
            timer1.Tick += new EventHandler(timer1_Tick);
            timer1.Start();



            tb_startTime.Format = DateTimePickerFormat.Custom;
            tb_startTime.CustomFormat = "yyyy-MM-dd HH:mm:ss";
            tb_endTime.Format = DateTimePickerFormat.Custom;
            tb_endTime.CustomFormat = "yyyy-MM-dd HH:mm:ss";


            SetDiagramTimeRange((XYDiagram)chartControl1.Diagram, 1440);
            SetDiagramTimeRange((XYDiagram)chartControl2.Diagram, 1440);
            SetDiagramTimeRange((XYDiagram)chartControl3.Diagram, 1440);
            SetDiagramTimeRange((XYDiagram)chartControl4.Diagram, 1440);


            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
        }

        private void timer1_Tick(object sender, EventArgs e)
        {

            if (Properties.Settings.Default.DEBUG)
            {
                // AugoGenerating
                Random rand = new Random();

                Repository.Instance.dbConnector.Insert_Value_to_Database("trend_data", rand.Next(800, 1000) / 10, rand.Next(100, 200) / 10, rand.Next(400, 500) / 10);
                Repository.Instance.dbConnector.Insert_Value_to_Database("grid_trend_data", rand.Next(1000, 1200) / 10, rand.Next(200, 300) / 10, rand.Next(500, 600) / 10);
                Repository.Instance.dbConnector.Insert_Value_to_Database("load_trend_data", rand.Next(1200, 1400) / 10, rand.Next(300, 400) / 10, rand.Next(600, 700) / 10);

            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Repository.Instance.dbConnector.Insert_Value_to_Database();

        }

        private void 적용(object sender, EventArgs e)
        {
            SetDiagramTimeRange((XYDiagram)chartControl1.Diagram, 0);
            SetDiagramTimeRange((XYDiagram)chartControl2.Diagram, 0);
            SetDiagramTimeRange((XYDiagram)chartControl3.Diagram, 0);
            SetDiagramTimeRange((XYDiagram)chartControl4.Diagram, 0);
        }


        private void SetDiagramTimeRange(XYDiagram diagram, int diff)
        {
            try
            {
                DateTime dt1 = DateTime.Now.AddMinutes(diff);
                DateTime dt2 = DateTime.Now.AddMinutes(-1 * diff);
                if (diff != 0)
                {

                    tb_endTime.Text = dt1.Year.ToString("D4") + "-" + dt1.Month.ToString("D2") + "-" + dt1.Day.ToString("D2") + " " + dt1.Hour.ToString("D2") + ":" + dt1.Minute.ToString("D2") + ":00";
                    tb_startTime.Text = dt2.Year.ToString("D4") + "-" + dt2.Month.ToString("D2") + "-" + dt2.Day.ToString("D2") + " " + dt2.Hour.ToString("D2") + ":" + dt2.Minute.ToString("D2") + ":00";
                }

                //DateTime t_Datetime_Maxvalue = DateTime.Parse(tb_endTime.Text);             
                DateTime t_Datetime_Maxvalue = dt1;

                diagram.AxisX.VisualRange.MaxValue = t_Datetime_Maxvalue;
                diagram.AxisX.WholeRange.MaxValue = t_Datetime_Maxvalue;

                //DateTime t_Datetime_Minvalue = DateTime.Parse(tb_startTime.Text.Trim());
                DateTime t_Datetime_Minvalue = dt2;
                diagram.AxisX.VisualRange.MinValue = t_Datetime_Minvalue;
                diagram.AxisX.WholeRange.MinValue = t_Datetime_Minvalue;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

        }
        private void button5_Click(object sender, EventArgs e)
        {

        }

        private void button4_Click(object sender, EventArgs e)
        {

        }

        private void button3_Click(object sender, EventArgs e)
        {

        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox a1 = checkBox1;
            CheckBox a2 = checkBox2;
            CheckBox a3 = checkBox3;
            CheckBox a4 = checkBox4;

            int num_of_trend = new int();

            XYDiagram diagram = (XYDiagram)chartControl1.Diagram;
            XYDiagram diagram1 = (XYDiagram)chartControl2.Diagram;
            XYDiagram diagram2 = (XYDiagram)chartControl3.Diagram;
            XYDiagram diagram3 = (XYDiagram)chartControl4.Diagram;

            List<ChartControl> list = new List<ChartControl>();


            if (a1.Checked)
            {
                chartControl1.Visible = true;
                list.Add(chartControl1);
                num_of_trend++;
            }
            else
            {
                chartControl1.Visible = false;
            }

            if (a2.Checked)
            {
                chartControl2.Visible = true;
                list.Add(chartControl2);
                num_of_trend++;
            }
            else
            {
                chartControl2.Visible = false;
            }

            if (a3.Checked)
            {
                chartControl3.Visible = true;
                list.Add(chartControl3);
                num_of_trend++;
            }
            else
            {
                chartControl3.Visible = false;
            }
            if (a4.Checked)
            {
                chartControl4.Visible = true;
                list.Add(chartControl4);
                num_of_trend++;
            }
            else
            {
                chartControl4.Visible = false;
            }

            const int trend_Width = 744;
            const int trend_Height4 = 86;
            const int trend_Height3 = 115;
            const int trend_Height2 = 170;
            const int trend_Height1 = 351;
            const int location_X = 43;
            const int location_Y1 = 61;
            const int location_Y2 = 154;
            const int location_Y3 = 241;
            const int location_Y4 = 333;



            switch (num_of_trend)
            {

                case 4:
                    // 
                    for (int i = 0; i < num_of_trend; i++)
                    {
                        list[i].Width = trend_Width;
                        list[i].Height = trend_Height4;
                    }

                    list[0].Left = location_X;
                    list[0].Top = location_Y1;

                    list[1].Left = location_X;
                    list[1].Top = location_Y2;

                    list[2].Left = location_X;
                    list[2].Top = location_Y3;

                    list[3].Left = location_X;
                    list[3].Top = location_Y4;

                    break;

                case 3:
                    // 
                    for (int i = 0; i < num_of_trend; i++)
                    {
                        list[i].Width = trend_Width;
                        list[i].Height = trend_Height3;
                    }


                    list[0].Left = location_X;
                    list[0].Top = location_Y1;

                    list[1].Left = location_X;
                    list[1].Top = 182;

                    list[2].Left = location_X;
                    list[2].Top = 302;
                    break;
                case 2:
                    for (int i = 0; i < num_of_trend; i++)
                    {
                        list[i].Width = trend_Width;
                        list[i].Height = trend_Height2;
                    }

                    list[0].Left = location_X;
                    list[0].Top = location_Y1;

                    list[1].Left = location_X;
                    list[1].Top = location_Y3;
                    break;

                case 1:
                    for (int i = 0; i < num_of_trend; i++)
                    {
                        list[i].Width = trend_Width;
                        list[i].Height = trend_Height1;
                    }
                    list[0].Left = location_X;
                    list[0].Top = location_Y1;
                    break;


            }
        }

        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox a = (CheckBox)sender;
            XYDiagram diagram = (XYDiagram)chartControl1.Diagram;
            XYDiagram diagram1 = (XYDiagram)chartControl2.Diagram;
            XYDiagram diagram2 = (XYDiagram)chartControl3.Diagram;

            if (a.Checked)
            {
                diagram.AxisX.DateTimeScaleOptions.ScaleMode = ScaleMode.Continuous;
                diagram1.AxisX.DateTimeScaleOptions.ScaleMode = ScaleMode.Continuous;
                diagram2.AxisX.DateTimeScaleOptions.ScaleMode = ScaleMode.Continuous;
            }
            else
            {
                diagram.AxisX.DateTimeScaleOptions.ScaleMode = ScaleMode.Manual;
                diagram1.AxisX.DateTimeScaleOptions.ScaleMode = ScaleMode.Manual;
                diagram2.AxisX.DateTimeScaleOptions.ScaleMode = ScaleMode.Manual;
            }

        }

        private void checkBox4_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox a = (CheckBox)sender;
            XYDiagram diagram = (XYDiagram)chartControl1.Diagram;
            XYDiagram diagram1 = (XYDiagram)chartControl2.Diagram;
            XYDiagram diagram2 = (XYDiagram)chartControl3.Diagram;

            if (a.Checked)
            {
                diagram.AxisX.WholeRange.AutoSideMargins = true;
                diagram.AxisX.VisualRange.AutoSideMargins = true;

                diagram1.AxisX.WholeRange.AutoSideMargins = true;
                diagram1.AxisX.VisualRange.AutoSideMargins = true;

                diagram2.AxisX.WholeRange.AutoSideMargins = true;
                diagram2.AxisX.VisualRange.AutoSideMargins = true;
            }
            else
            {
                diagram.AxisX.WholeRange.AutoSideMargins = false;
                diagram.AxisX.VisualRange.AutoSideMargins = false;

                diagram1.AxisX.WholeRange.AutoSideMargins = false;
                diagram1.AxisX.VisualRange.AutoSideMargins = false;

                diagram2.AxisX.WholeRange.AutoSideMargins = false;
                diagram2.AxisX.VisualRange.AutoSideMargins = false;
            }
        }

        private void checkBox5_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox a = (CheckBox)sender;
            XYDiagram diagram = (XYDiagram)chartControl1.Diagram;
            XYDiagram diagram1 = (XYDiagram)chartControl2.Diagram;
            XYDiagram diagram2 = (XYDiagram)chartControl3.Diagram;

            if (a.Checked)
            {
                diagram.AxisX.WholeRange.Auto = true;
                diagram.AxisX.VisualRange.Auto = true;

                diagram1.AxisX.WholeRange.Auto = true;
                diagram1.AxisX.VisualRange.Auto = true;

                diagram2.AxisX.WholeRange.Auto = true;
                diagram2.AxisX.VisualRange.Auto = true;
            }
            else
            {
                diagram.AxisX.WholeRange.Auto = false;
                diagram.AxisX.VisualRange.Auto = false;

                diagram1.AxisX.WholeRange.Auto = false;
                diagram1.AxisX.VisualRange.Auto = false;

                diagram2.AxisX.WholeRange.Auto = false;
                diagram2.AxisX.VisualRange.Auto = false;
            }
        }

        private void button3_Click_1(object sender, EventArgs e)
        {
            SetDiagramTimeRange((XYDiagram)chartControl1.Diagram, 10);
            SetDiagramTimeRange((XYDiagram)chartControl2.Diagram, 10);
            SetDiagramTimeRange((XYDiagram)chartControl3.Diagram, 10);
            SetDiagramTimeRange((XYDiagram)chartControl4.Diagram, 10);
        }

        private void button4_Click_1(object sender, EventArgs e)
        {
            SetDiagramTimeRange((XYDiagram)chartControl1.Diagram, 60);
            SetDiagramTimeRange((XYDiagram)chartControl2.Diagram, 60);
            SetDiagramTimeRange((XYDiagram)chartControl3.Diagram, 60);
            SetDiagramTimeRange((XYDiagram)chartControl4.Diagram, 60);
        }

        private void button5_Click_1(object sender, EventArgs e)
        {
            SetDiagramTimeRange((XYDiagram)chartControl1.Diagram, 1440);
            SetDiagramTimeRange((XYDiagram)chartControl2.Diagram, 1440);
            SetDiagramTimeRange((XYDiagram)chartControl3.Diagram, 1440);
            SetDiagramTimeRange((XYDiagram)chartControl4.Diagram, 1440);
        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            if (DialogResult.Yes == System.Windows.Forms.MessageBox.Show("Are you sure to export trending data?", "Exit", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation))
            {
                Repository.Instance.dbConnector.Export_Data();
            }

        }

        private void TrendViewer_Load(object sender, EventArgs e)
        {
            checkBox1_CheckedChanged(sender, e);
        }

        private void chartControl2_Click(object sender, EventArgs e)
        {

        }

        private void chartControl3_Click(object sender, EventArgs e)
        {

        }

        private void chartControl4_Click(object sender, EventArgs e)
        {

        }

        private void btn_Battery_Click(object sender, EventArgs e)
        {
            chartControl1.ClearCache();
            chartControl2.ClearCache();
            chartControl3.ClearCache();
            chartControl4.ClearCache();

            chartControl1.RefreshData();
            chartControl2.RefreshData();
            chartControl3.RefreshData();
            chartControl4.RefreshData();

            chartControl1.DataSource = Battery_DataSource;
            chartControl2.DataSource = Battery_DataSource;
            chartControl3.DataSource = Battery_DataSource;
            chartControl4.DataSource = Battery_DataSource;

            Battery_DataSource.Fill();
        }

        private void btn_Grid_Click(object sender, EventArgs e)
        {

            chartControl1.ClearCache();
            chartControl2.ClearCache();
            chartControl3.ClearCache();
            chartControl4.ClearCache();

            chartControl1.RefreshData();
            chartControl2.RefreshData();
            chartControl3.RefreshData();
            chartControl4.RefreshData();
           
            chartControl1.DataSource = Grid_DataSource;
            chartControl2.DataSource = Grid_DataSource;
            chartControl3.DataSource = Grid_DataSource;
            chartControl4.DataSource = Grid_DataSource;
            
            Grid_DataSource.Fill();

        }

        private void btn_Load_Click(object sender, EventArgs e)
        {
            chartControl1.ClearCache();
            chartControl2.ClearCache();
            chartControl3.ClearCache();
            chartControl4.ClearCache();

            chartControl1.RefreshData();
            chartControl2.RefreshData();
            chartControl3.RefreshData();
            chartControl4.RefreshData();

            chartControl1.DataSource = Load_DataSource;
            chartControl2.DataSource = Load_DataSource;
            chartControl3.DataSource = Load_DataSource;
            chartControl4.DataSource = Load_DataSource;

            Load_DataSource.Fill();
        }

        private void button2_MouseDown(object sender, MouseEventArgs e)
        {

        }

        private void button2_MouseUp(object sender, MouseEventArgs e)
        {

        }
    }
}

